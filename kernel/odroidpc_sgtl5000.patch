diff --git a/sound/soc/aml/m8/Kconfig b/sound/soc/aml/m8/Kconfig
index 7a69b16..138246e 100644
--- a/sound/soc/aml/m8/Kconfig
+++ b/sound/soc/aml/m8/Kconfig
@@ -8,6 +8,11 @@ config SND_AML_M8
 	select SND_SOC_AML_M8_CODEC if SND_AML_M8
     select SND_SOC_DUMMY_CODEC
 
+config SND_ODROID_SGTL5000
+	tristate "ODROID SGTL5000 Support"
+	depends on SND_AML_M8_SOC && MACH_MESON8B_ODROIDC
+	select SND_SOC_SGTL5000
+
 config SND_ODROID_HIFI1
 	tristate "ODROID HiFi-Shield1(pcm5102) Support"
 	depends on SND_AML_M8_SOC && MACH_MESON8B_ODROIDC
diff --git a/sound/soc/aml/m8/odroid_dac.c b/sound/soc/aml/m8/odroid_dac.c
index eac0c6f..ce624b3 100644
--- a/sound/soc/aml/m8/odroid_dac.c
+++ b/sound/soc/aml/m8/odroid_dac.c
@@ -40,6 +40,8 @@
 #include "../../codecs/aml_m8_codec.h"
 #include <mach/register.h>
 
+#include "../../codecs/sgtl5000.h"
+
 #ifdef CONFIG_USE_OF
 #include <linux/of.h>
 #include <linux/pinctrl/consumer.h>
@@ -62,6 +64,7 @@ static int odroid_hw_params(struct snd_pcm_substream *substream,
     struct snd_soc_pcm_runtime *rtd = substream->private_data;
     struct snd_soc_dai *codec_dai = rtd->codec_dai;
     struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    struct snd_soc_codec *codec = rtd->codec;
     int ret;
 
     printk(KERN_INFO "enter %s rate=%d, format=%d \n", __func__, params_rate(params), params_format(params));
@@ -81,13 +84,21 @@ static int odroid_hw_params(struct snd_pcm_substream *substream,
         printk(KERN_ERR "%s: set cpu dai fmt failed!\n", __func__);
         return ret;
     }
-
+    
     /* set cpu DAI clock */
     ret = snd_soc_dai_set_sysclk(cpu_dai, 0, params_rate(params) * 256, SND_SOC_CLOCK_OUT);
     if (ret < 0) {
         printk(KERN_ERR "%s: set cpu dai sysclk failed (rate: %d)!\n", __func__, params_rate(params));
         return ret;
     }
+	
+    /* Set SGTL5000's SYSCLK */
+    ret = snd_soc_dai_set_sysclk(codec_dai, SGTL5000_SYSCLK, 12288000, SND_SOC_CLOCK_IN);
+    if (ret) {
+      printk(KERN_ERR "%s: could not set codec driver clock params\n",__func__);
+      return ret;
+    }
+    
     return 0;
 }
 
@@ -95,12 +106,32 @@ static struct snd_soc_ops odroid_ops = {
     .hw_params = odroid_hw_params,
 };
 
+
+static int odroid_init(struct snd_soc_pcm_runtime *rtd)
+{
+  struct snd_soc_card *card = rtd->card;
+  struct snd_soc_codec *codec = rtd->codec;
+
+  printk("init dac\n");
+  
+  snd_soc_dapm_force_enable_pin(&card->dapm, "LO");
+  snd_soc_dapm_force_enable_pin(&card->dapm, "ADC");
+  snd_soc_dapm_force_enable_pin(&card->dapm, "DAC");
+  snd_soc_dapm_force_enable_pin(&card->dapm, "HP");
+  snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+		      SGTL5000_VAG_POWERUP, SGTL5000_VAG_POWERUP);
+
+  return 0;
+}
+
 static int odroid_set_bias_level(struct snd_soc_card *card,
         struct snd_soc_dapm_context *dapm, enum snd_soc_bias_level level)
 {
     int ret = 0;
     struct odroid_audio_private_data * p_odroid_audio;
 
+      printk("set bias level\n");
+      
     p_odroid_audio = snd_soc_card_get_drvdata(card);
     if (p_odroid_audio->bias_level == (int)level)
         return 0;
@@ -122,7 +153,8 @@ static int i2s_gpio_set(struct snd_soc_card *card)
     const char *str=NULL;
     int ret;
     
-
+    printk("i2s_gpio_set\n");
+    
     p_odroid_audio = snd_soc_card_get_drvdata(card);
     if(p_odroid_audio->pin_ctl)
         devm_pinctrl_put(p_odroid_audio->pin_ctl);
@@ -175,6 +207,8 @@ static int aml_resume_pre(struct snd_soc_card *card)
     struct odroid_audio_private_data *p_odroid_audio;
     p_odroid_audio = snd_soc_card_get_drvdata(card);
 
+    printk("aml resume pre\n");
+    
     if(p_odroid_audio->gpio_i2s_m)
         amlogic_gpio_free(p_odroid_audio->gpio_i2s_m,"low_mclk");
     if(p_odroid_audio->gpio_i2s_s)
@@ -202,13 +236,17 @@ static int aml_resume_post(struct snd_soc_card *card)
 
 static struct snd_soc_dai_link odroid_dai_link[] = {
     {
-        .name = "SND_PCM5102",
+        .name = "SND_SGTL5000",
         .stream_name = "PCM5102 HiFi",
         .cpu_dai_name = "aml-i2s-dai.0",
         .platform_name = "aml-i2s.0",
-        .codec_name = "pcm5102.0",
-        .codec_dai_name = "pcm5102",
+	//	        .codec_name = "pcm5102.0",
+	// .codec_dai_name = "pcm5102",
+	//	        .codec_name = "sgtl5000.0",
+	.codec_name= "sgtl5000.1-000a",
+	.codec_dai_name = "sgtl5000",
         .ops = &odroid_ops,
+	.init = odroid_init,
     },
 };
 
@@ -231,6 +269,7 @@ static int odroid_audio_probe(struct platform_device *pdev)
     struct odroid_audio_private_data *p_odroid_audio;
     int ret = 0;
 
+    printk("audio probe\n");
 #ifdef CONFIG_USE_OF
     p_odroid_audio = devm_kzalloc(&pdev->dev,
             sizeof(struct odroid_audio_private_data), GFP_KERNEL);
@@ -272,6 +311,7 @@ static int odroid_audio_remove(struct platform_device *pdev)
 	struct snd_soc_card *card = platform_get_drvdata(pdev);
 	struct odroid_audio_private_data *p_odroid_audio;
 
+	printk("audio remove\n");
 	p_odroid_audio = snd_soc_card_get_drvdata(card);
 	if(p_odroid_audio->pin_ctl)
 		devm_pinctrl_put(p_odroid_audio->pin_ctl);
@@ -301,7 +341,7 @@ static struct platform_driver odroid_audio_driver = {
 };
 
 static int __init odroid_audio_init(void)
-{
+{  
     return platform_driver_register(&odroid_audio_driver);
 }
 
diff --git a/sound/soc/codecs/sgtl5000.c b/sound/soc/codecs/sgtl5000.c
index 665e0dd..ad7a85e 100644
--- a/sound/soc/codecs/sgtl5000.c
+++ b/sound/soc/codecs/sgtl5000.c
@@ -37,7 +37,7 @@
 static const u16 sgtl5000_regs[SGTL5000_MAX_REG_OFFSET] =  {
 	[SGTL5000_CHIP_CLK_CTRL] = 0x0008,
 	[SGTL5000_CHIP_I2S_CTRL] = 0x0010,
-	[SGTL5000_CHIP_SSS_CTRL] = 0x0010,
+	[SGTL5000_CHIP_SSS_CTRL] = 0x0008,
 	[SGTL5000_CHIP_DAC_VOL] = 0x3c3c,
 	[SGTL5000_CHIP_PAD_STRENGTH] = 0x015f,
 	[SGTL5000_CHIP_ANA_HP_CTRL] = 0x1818,
@@ -54,6 +54,7 @@ static const u16 sgtl5000_regs[SGTL5000_MAX_REG_OFFSET] =  {
 	[SGTL5000_DAP_EQ_BASS_BAND3] = 0x002f,
 	[SGTL5000_DAP_EQ_BASS_BAND4] = 0x002f,
 	[SGTL5000_DAP_MAIN_CHAN] = 0x8000,
+	[SGTL5000_DAP_MIX_CHAN] = 0x4000,
 	[SGTL5000_DAP_AVC_CTRL] = 0x0510,
 	[SGTL5000_DAP_AVC_THRESHOLD] = 0x1473,
 	[SGTL5000_DAP_AVC_ATTACK] = 0x0028,
@@ -150,16 +151,23 @@ static int mic_bias_event(struct snd_soc_dapm_widget *w,
 static int power_vag_event(struct snd_soc_dapm_widget *w,
 	struct snd_kcontrol *kcontrol, int event)
 {
+//	struct snd_soc_codec *codec = snd_soc_dapm_to_codec(w->dapm);
+//	const u32 mask = SGTL5000_DAC_POWERUP | SGTL5000_ADC_POWERUP;
+
 	switch (event) {
-	case SND_SOC_DAPM_PRE_PMU:
+	case SND_SOC_DAPM_POST_PMU:
 		snd_soc_update_bits(w->codec, SGTL5000_CHIP_ANA_POWER,
 			SGTL5000_VAG_POWERUP, SGTL5000_VAG_POWERUP);
+		msleep(400);
 		break;
 
-	case SND_SOC_DAPM_POST_PMD:
-		snd_soc_update_bits(w->codec, SGTL5000_CHIP_ANA_POWER,
-			SGTL5000_VAG_POWERUP, 0);
-		msleep(400);
+	case SND_SOC_DAPM_PRE_PMD:
+//		if ((snd_soc_read(codec, SGTL5000_CHIP_ANA_POWER) &
+//				mask) != mask) {
+			snd_soc_update_bits(w->codec, SGTL5000_CHIP_ANA_POWER,
+				SGTL5000_VAG_POWERUP, 0);
+			msleep(400);
+//		}
 		break;
 	default:
 		break;
@@ -217,12 +225,14 @@ static const struct snd_soc_dapm_widget sgtl5000_dapm_widgets[] = {
 				0, SGTL5000_CHIP_DIG_POWER,
 				1, 0),
 
-	SND_SOC_DAPM_SUPPLY("VAG_POWER", SGTL5000_CHIP_ANA_POWER, 7, 0,
+/*	SND_SOC_DAPM_SUPPLY("VAG_POWER", SGTL5000_CHIP_ANA_POWER, 7, 0,
 			    power_vag_event,
 			    SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD),
-
+*/
 	SND_SOC_DAPM_ADC("ADC", "Capture", SGTL5000_CHIP_ANA_POWER, 1, 0),
 	SND_SOC_DAPM_DAC("DAC", "Playback", SGTL5000_CHIP_ANA_POWER, 3, 0),
+	SND_SOC_DAPM_PRE("VAG_POWER_PRE", power_vag_event),
+	SND_SOC_DAPM_POST("VAG_POWER_POST", power_vag_event),
 };
 
 /* routes for sgtl5000 */
@@ -230,16 +240,16 @@ static const struct snd_soc_dapm_route sgtl5000_dapm_routes[] = {
 	{"Capture Mux", "LINE_IN", "LINE_IN"},	/* line_in --> adc_mux */
 	{"Capture Mux", "MIC_IN", "MIC_IN"},	/* mic_in --> adc_mux */
 
-	{"ADC", NULL, "VAG_POWER"},
+//	{"ADC", NULL, "VAG_POWER"},
 	{"ADC", NULL, "Capture Mux"},		/* adc_mux --> adc */
 	{"AIFOUT", NULL, "ADC"},		/* adc --> i2s_out */
 
-	{"DAC", NULL, "VAG_POWER"},
+//	{"DAC", NULL, "VAG_POWER"},
 	{"DAC", NULL, "AIFIN"},			/* i2s-->dac,skip audio mux */
 	{"Headphone Mux", "DAC", "DAC"},	/* dac --> hp_mux */
 	{"LO", NULL, "DAC"},			/* dac --> line_out */
 
-	{"LINE_IN", NULL, "VAG_POWER"},
+//	{"LINE_IN", NULL, "VAG_POWER"},
 	{"Headphone Mux", "LINE_IN", "LINE_IN"},/* line_in --> hp_mux */
 	{"HP", NULL, "Headphone Mux"},		/* hp_mux --> hp */
 
@@ -362,6 +372,39 @@ static int dac_put_volsw(struct snd_kcontrol *kcontrol,
 	return 0;
 }
 
+
+static int mixer_vol_get(struct snd_kcontrol *kcontrol,
+			 struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	struct soc_mixer_control *control =
+		(struct soc_mixer_control *)kcontrol->private_value;
+	u16 reg = snd_soc_read(codec, control->reg);
+	int vol;
+
+	vol = (reg * 100) >> 15;
+
+	ucontrol->value.integer.value[0] = vol;
+	ucontrol->value.integer.value[1] = vol;
+	return 0;
+}
+
+static int mixer_vol_put(struct snd_kcontrol *kcontrol,
+			 struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	struct soc_mixer_control *control =
+		(struct soc_mixer_control *)kcontrol->private_value;
+	u16 reg;
+	int vol;
+
+	vol = ucontrol->value.integer.value[0];
+	reg = (vol << 15) / 100;
+	snd_soc_write(codec, control->reg, reg);
+
+	return 0;
+}
+
 static const DECLARE_TLV_DB_SCALE(capture_6db_attenuate, -600, 600, 0);
 
 /* tlv for mic gain, 0db 20db 30db 40db */
@@ -374,6 +417,8 @@ static const unsigned int mic_gain_tlv[] = {
 /* tlv for hp volume, -51.5db to 12.0db, step .5db */
 static const DECLARE_TLV_DB_SCALE(headphone_volume, -5150, 50, 0);
 
+static const DECLARE_TLV_DB_SCALE(mixer_volume, 0, 1, 0);
+
 static const struct snd_kcontrol_new sgtl5000_snd_controls[] = {
 	/* SOC_DOUBLE_S8_TLV with invert */
 	{
@@ -402,6 +447,12 @@ static const struct snd_kcontrol_new sgtl5000_snd_controls[] = {
 
 	SOC_SINGLE_TLV("Mic Volume", SGTL5000_CHIP_MIC_CTRL,
 			0, 3, 0, mic_gain_tlv),
+
+	SOC_SINGLE_EXT_TLV("Main Channel Volume", SGTL5000_DAP_MAIN_CHAN,
+			0, 200, 0, mixer_vol_get, mixer_vol_put, mixer_volume),
+	SOC_SINGLE_EXT_TLV("Mixer Channel Volume", SGTL5000_DAP_MIX_CHAN,
+			0, 200, 0, mixer_vol_get, mixer_vol_put, mixer_volume),
+
 };
 
 /* mute the codec used by alsa core */
@@ -596,10 +647,11 @@ static int sgtl5000_set_clock(struct snd_soc_codec *codec, int frame_rate)
 		if (sgtl5000->master) {
 			clk_ctl |= SGTL5000_MCLK_FREQ_PLL <<
 				SGTL5000_MCLK_FREQ_SHIFT;
-		} else {
+			/*		} else {
 			dev_err(codec->dev,
 				"PLL not supported in slave mode\n");
 			return -EINVAL;
+			*/
 		}
 	}
 
@@ -897,24 +949,53 @@ static int sgtl5000_set_bias_level(struct snd_soc_codec *codec,
 	int ret;
 	struct sgtl5000_priv *sgtl5000 = snd_soc_codec_get_drvdata(codec);
 
+	if (codec->dapm.bias_level == level)
+		return 0;
+
 	switch (level) {
 	case SND_SOC_BIAS_ON:
+/*		ret = snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+				SGTL5000_VAG_POWERUP, SGTL5000_VAG_POWERUP);
+		if (ret)
+			msleep(400);
+		break;
+*/
 	case SND_SOC_BIAS_PREPARE:
+/*		ret = snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+				SGTL5000_VAG_POWERUP, 0);
+		if (ret)
+			msleep(600);
 		break;
+		*/
 	case SND_SOC_BIAS_STANDBY:
 		if (codec->dapm.bias_level == SND_SOC_BIAS_OFF) {
-			ret = regulator_bulk_enable(
+		  /*			ret = regulator_bulk_enable(
 						ARRAY_SIZE(sgtl5000->supplies),
 						sgtl5000->supplies);
 			if (ret)
 				return ret;
+		  */
 			udelay(10);
 		}
+//		ret = snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+//				SGTL5000_VAG_POWERUP, 0);
+		snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+				    SGTL5000_REFTOP_POWERUP,
+				    SGTL5000_REFTOP_POWERUP);
+//		if (ret)
+//			msleep(600);
 
 		break;
 	case SND_SOC_BIAS_OFF:
-		regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
+//		ret = snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+//				SGTL5000_VAG_POWERUP, 0);
+		snd_soc_update_bits(codec, SGTL5000_CHIP_ANA_POWER,
+				SGTL5000_REFTOP_POWERUP, 0);
+//		if (ret)
+//			msleep(600);
+	  /*		regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
 					sgtl5000->supplies);
+	  */
 		break;
 	}
 
@@ -1073,14 +1154,17 @@ static int sgtl5000_set_power_regs(struct snd_soc_codec *codec)
 	int vag;
 	struct sgtl5000_priv *sgtl5000 = snd_soc_codec_get_drvdata(codec);
 
-	vdda  = regulator_get_voltage(sgtl5000->supplies[VDDA].consumer);
+	/*	vdda  = regulator_get_voltage(sgtl5000->supplies[VDDA].consumer);
 	vddio = regulator_get_voltage(sgtl5000->supplies[VDDIO].consumer);
 	vddd  = regulator_get_voltage(sgtl5000->supplies[VDDD].consumer);
 
 	vdda  = vdda / 1000;
 	vddio = vddio / 1000;
 	vddd  = vddd / 1000;
-
+	*/
+	vdda=3300;
+	vddio=3300;
+	vddd=1800;
 	if (vdda <= 0 || vddio <= 0 || vddd < 0) {
 		dev_err(codec->dev, "regulator voltage not set correctly\n");
 
@@ -1217,7 +1301,7 @@ static int sgtl5000_enable_regulators(struct snd_soc_codec *codec)
 
 	for (i = 0; i < ARRAY_SIZE(sgtl5000->supplies); i++)
 		sgtl5000->supplies[i].supply = supply_names[i];
-
+	/*
 	ret = regulator_bulk_get(codec->dev, ARRAY_SIZE(sgtl5000->supplies),
 				sgtl5000->supplies);
 	if (!ret)
@@ -1232,7 +1316,7 @@ static int sgtl5000_enable_regulators(struct snd_soc_codec *codec)
 					sgtl5000->supplies);
 	if (ret)
 		goto err_regulator_free;
-
+	*/
 	/* wait for all power rails bring up */
 	udelay(10);
 
@@ -1246,7 +1330,8 @@ static int sgtl5000_enable_regulators(struct snd_soc_codec *codec)
 		dev_err(codec->dev,
 			"Device with ID register %x is not a sgtl5000\n", reg);
 		ret = -ENODEV;
-		goto err_regulator_disable;
+		//		goto err_regulator_disable;
+		return ret;
 	}
 
 	rev = (reg & SGTL5000_REVID_MASK) >> SGTL5000_REVID_SHIFT;
@@ -1256,6 +1341,7 @@ static int sgtl5000_enable_regulators(struct snd_soc_codec *codec)
 	 * workaround for revision 0x11 and later,
 	 * roll back to use internal LDO
 	 */
+#if 0
 	if (external_vddd && rev >= 0x11) {
 		/* disable all regulator first */
 		regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
@@ -1276,9 +1362,9 @@ static int sgtl5000_enable_regulators(struct snd_soc_codec *codec)
 		/* wait for all power rails bring up */
 		udelay(10);
 	}
-
+#endif
 	return 0;
-
+	/*
 err_regulator_disable:
 	regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
 				sgtl5000->supplies);
@@ -1288,7 +1374,7 @@ err_regulator_free:
 	if (external_vddd)
 		ldo_regulator_remove(codec);
 	return ret;
-
+	*/
 }
 
 static int sgtl5000_probe(struct snd_soc_codec *codec)
@@ -1310,7 +1396,8 @@ static int sgtl5000_probe(struct snd_soc_codec *codec)
 	/* power up sgtl5000 */
 	ret = sgtl5000_set_power_regs(codec);
 	if (ret)
-		goto err;
+	  return ret;
+	//		goto err;
 
 	/* enable small pop, introduce 400ms delay in turning off */
 	snd_soc_update_bits(codec, SGTL5000_CHIP_REF_CTRL,
@@ -1323,10 +1410,17 @@ static int sgtl5000_probe(struct snd_soc_codec *codec)
 	 * set i2s as default input of sound switch
 	 * TODO: add sound switch to control and dapm widge.
 	 */
+//	snd_soc_write(codec, SGTL5000_CHIP_SSS_CTRL,
+//			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT);
+
 	snd_soc_write(codec, SGTL5000_CHIP_SSS_CTRL,
-			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT);
+			(SGTL5000_DAP_SEL_I2S_IN << SGTL5000_DAP_SEL_SHIFT)|
+			(SGTL5000_DAP_MIX_SEL_ADC << SGTL5000_DAP_MIX_SEL_SHIFT)|
+			(SGTL5000_DAC_SEL_DAP << SGTL5000_DAC_SEL_SHIFT)
+			);
+
 	snd_soc_write(codec, SGTL5000_CHIP_DIG_POWER,
-			SGTL5000_ADC_EN | SGTL5000_DAC_EN);
+			SGTL5000_ADC_EN | SGTL5000_DAC_EN | SGTL5000_DAP_POWERUP);
 
 	/* enable dac volume ramp by default */
 	snd_soc_write(codec, SGTL5000_CHIP_ADCDAC_CTRL,
@@ -1340,22 +1434,28 @@ static int sgtl5000_probe(struct snd_soc_codec *codec)
 			SGTL5000_HP_ZCD_EN |
 			SGTL5000_ADC_ZCD_EN);
 
-	snd_soc_write(codec, SGTL5000_CHIP_MIC_CTRL, 2);
+	snd_soc_write(codec, SGTL5000_CHIP_MIC_CTRL, 0);
 
+	snd_soc_write(codec, SGTL5000_CHIP_DAC_VOL, 0x6060);
+	snd_soc_write(codec, SGTL5000_CHIP_ANA_ADC_CTRL,
+		(0xf << SGTL5000_ADC_VOL_LEFT_SHIFT) |\
+		(0xf << SGTL5000_ADC_VOL_RIGHT_SHIFT));
 	/*
 	 * disable DAP
 	 * TODO:
 	 * Enable DAP in kcontrol and dapm.
 	 */
-	snd_soc_write(codec, SGTL5000_DAP_CTRL, 0);
+//	snd_soc_write(codec, SGTL5000_DAP_CTRL, 0);
+	snd_soc_write(codec, SGTL5000_DAP_CTRL, SGTL5000_DAP_EN|SGTL5000_DAP_MIX_EN);
 
 	/* leading to standby state */
 	ret = sgtl5000_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
 	if (ret)
-		goto err;
+	  return ret;
+	  //		goto err;
 
 	return 0;
-
+	/*
 err:
 	regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
 						sgtl5000->supplies);
@@ -1364,6 +1464,7 @@ err:
 	ldo_regulator_remove(codec);
 
 	return ret;
+	*/
 }
 
 static int sgtl5000_remove(struct snd_soc_codec *codec)
@@ -1371,13 +1472,13 @@ static int sgtl5000_remove(struct snd_soc_codec *codec)
 	struct sgtl5000_priv *sgtl5000 = snd_soc_codec_get_drvdata(codec);
 
 	sgtl5000_set_bias_level(codec, SND_SOC_BIAS_OFF);
-
+	/*
 	regulator_bulk_disable(ARRAY_SIZE(sgtl5000->supplies),
 						sgtl5000->supplies);
 	regulator_bulk_free(ARRAY_SIZE(sgtl5000->supplies),
 				sgtl5000->supplies);
 	ldo_regulator_remove(codec);
-
+	*/
 	return 0;
 }
 
